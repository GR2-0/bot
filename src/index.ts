import { Telegraf, Markup } from 'telegraf';
import * as dotenv from 'dotenv';

dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN!);
const ADMIN_ID = Number(process.env.ADMIN_ID);

// In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–∏–Ω—Ç–æ–≤: userId -> points
const users: Record<number, number> = {};

function getPoints(id: number) {
  return users[id] ?? 0;
}

function addPoints(id: number, amount = 1) {
  users[id] = getPoints(id) + amount;
}

// –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
async function sendMainMenu(ctxOrCallback: any) {
  const id = ctxOrCallback.from.id;
  const name = ctxOrCallback.from.first_name;
  const points = getPoints(id);

  const text = `–ü—Ä–∏–≤–µ—Ç, ${name}!\n\nüéØ –¢–≤–æ–∏ –ø–æ–∏–Ω—Ç—ã: ${points}`;

  const buttons = [
    // [Markup.button.callback('üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∏–Ω—Ç', 'get_point')],
    // [Markup.button.callback('üìä –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', 'show_top')],
    [Markup.button.callback('üîÅ –û–±–Ω–æ–≤–∏—Ç—å', 'refresh')],
  ];

  if (id === ADMIN_ID) {
    buttons.push([Markup.button.callback('‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞', 'admin_menu')]);
  }

  await ctxOrCallback.reply(text, Markup.inlineKeyboard(buttons));
}

// /start
bot.start((ctx) => {
  addPoints(ctx.from.id, 0); // —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –Ω–µ—Ç
  return sendMainMenu(ctx);
});

// –ö–Ω–æ–ø–∫–∞: –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∏–Ω—Ç
bot.action('get_point', async (ctx) => {
  addPoints(ctx.from.id, 1);
  await sendMainMenu(ctx);
});

// –ö–Ω–æ–ø–∫–∞: –û–±–Ω–æ–≤–∏—Ç—å
bot.action('refresh', async (ctx) => {
  await sendMainMenu(ctx);
});

// –ö–Ω–æ–ø–∫–∞: –¢–æ–ø
bot.action('show_top', async (ctx) => {
  const top = Object.entries(users)
    .sort(([, a], [, b]) => b - a)
    .slice(0, 5)
    .map(([id, pts], i) => `${i + 1}. ID ${id}: ${pts} pts`)
    .join('\n');

  const text = `üìä –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n${top || '–ü–æ–∫–∞ –ø—É—Å—Ç–æ'}`;

  await ctx.reply(text, Markup.inlineKeyboard([
    [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'refresh')],
  ]));
});

bot.launch();
